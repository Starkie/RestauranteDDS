@startuml
skinparam groupInheritance 3
class PedidoRestaurante{
    - horaConfirmacion : Date
    - horaRecibido : Date
    - platosPedido : List<Plato>
     void addPlatosPedido(Plato platoPedido)
     void deletePlatoPedido(Plato platoPedido)
     void confirmarPedido()
     void cancelarPedido()
     void reclamarRetraso()
}

abstract class EstadoPedido{
    - descripcion : String
    void confirmarPedido(PedidoRestaurante pedido)
    void cancelarPedido(PedidoRestaurante pedido)
    Reclamacion reclamarRetraso(PedidoRestaurante pedido
}

abstract class Persona{
    -  nombre : String
    -  dni : int

}

class Cocinero{
    - disponible : boolean
    - pedidoAtendiendo : PedidoRestaurante
    void cocinarPedido(PedidoRestaurante pedido)
    void finalizarCocinaPedido()
}
class Repartidor{
    - disponible : boolean
    - pedidoActual : PedidoRestaurante
    void realizarEnvio(PedidoRestaurante pedido)
    void finalizarEnvio()
}

class Usuario

Persona <|-- Cocinero
Persona <|-- Repartidor
Persona <|-- Usuario

abstract class Orden{
void execute(Persona receptor)
}
class OrdenCocinar
class OrdenRepartir

Orden <|-- OrdenCocinar
Orden <|-- OrdenRepartir

class EmisorOrdenes{
    - static EmisorOrdenes elEmisor
    static EmisorOrdenes getEmisorOrdenes()
    void anyadirOrden(Orden orden)
    void cancelarOrden(PedidoRestaurante pedido)
    void registrarRepartidor(Repartidor repartidor)
    void registrarCocinero(Cocinero cocinero)
    Thread getThreadDisponibilidad()
}

PedidoRestaurante o--> "estado  1" EstadoPedido
PedidoRestaurante "0..*" o-- "1" Usuario

EmisorOrdenes "1" -- "0..*" Repartidor
EmisorOrdenes "1" -- "0..*" Cocinero
EmisorOrdenes "1" o-- "0..*" Orden

class ControlVistaPedido{
void NuevoPedido()
void ConfirmarPedido()
void CancelarPedido()
void ReclamarRetraso()
}
ControlVistaPedido  --> "0..1" PedidoRestaurante
ControlVistaPedido --> "1" Usuario
ControlVistaPedido --> "1" EmisorOrdenes
Orden --> "1" PedidoRestaurante
OrdenRepartir --> Repartidor
OrdenCocinar --> Cocinero
@enduml