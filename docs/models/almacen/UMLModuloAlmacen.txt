@startuml


abstract class ListaCompra {
	#nombre : String
	#descripcion : String
	#precio : int
	#unidades : int

	{abstract}void add(ListaCompra p)
	{abstract}void remove(ListaCompra p)
	{abstract}double getPrecio()
}


class ListaElemento {
	add(ListaCompra p)
	remove(ListaCompra p)
	double getPrecio()
	string toString()
}
note left
	Devuelve una excepcion 
	UnsupportedOperationException 
	al intentar usar los m√©todos 
	<i>add()</i> y <i>remove()</i>
end note



class ListaCompuesto {
	-hijos : List<ListaCompra>

	void add(ListaCompra p)
	void remove(ListaCompra p)
	double getPrecio()
	string toString()
}
note left
	<i>add(p)</i> => hijos.add( p );
	getPrecio() => 
		<b>para cada</b> p <b>en</b> hijos:
			precio += p.getPrecio();
end note

ListaCompra <|-down- ListaCompuesto
ListaCompra <|-- ListaElemento

ListaCompuesto o-- ListaCompra

class Pedido {
	-id : long
	-fecha : Date
	
	void confirmarPedido()
	void recibirPedido()
	void cancelarPedido()  
	double getPrecio()
	void addToPedido(ListaCompra lista)
}


note right: getPrecio() => lista.getPrecio()

enum EstadoPedido {
	PENDIENTE
	EN_CAMINO
	COMPLETO
	CANCELADO
}



Pedido "*" --> "lista 1" ListaCompra
Pedido -left-> "estado" EstadoPedido

class GestorPedidos {
	{static} #gestorPedidos : GestorPedidos
	__

	GestorPedidos getInstance()
	..
	Pedido crearPedido(List<Producto> productos)
	Pedido crearPedido(ListaCompra listaCompra)
	void addToPedido(Pedido pedido, ListaCompra listaCompra)
	void addToPedido(Pedido pedido, Producto producto)
	void addToPedido(Pedido pedido, List<Producto> producto)
	..
	void cancelarPedido(Pedido pedido)
	void confirmarPedido(Pedido pedido)
	void recibirPedido(Pedido pedido)
}

GestorPedidos "crea"..> Pedido

@enduml